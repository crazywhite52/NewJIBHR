{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work_Project\\\\grommet\\\\jib-register-2019\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Box, Heading, Grommet, TextInput } from \"grommet\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nfunction getSteps() {\n  return ['Job Description', 'Profile', 'Family', 'Contact', 'Education', 'Training', 'Career History', 'Skill'];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNext = () => {\n      this.setState(state => ({\n        activeStep: state.activeStep + 1\n      }));\n    };\n\n    this.handleBack = () => {\n      this.setState(state => ({\n        activeStep: state.activeStep - 1\n      }));\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0\n      });\n    };\n\n    this.state = {\n      activeStep: 0\n    };\n    this.getStepContent = this.getStepContent.bind(this);\n  }\n\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return 'Select campaign settings...';\n\n      case 1:\n        return 'What is an ad group anyways?';\n\n      case 2:\n        return 'This is the bit I really care about!';\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const steps = getSteps();\n    const connector = React.createElement(StepConnector, {\n      classes: {\n        active: classes.connectorActive,\n        completed: classes.connectorCompleted,\n        disabled: classes.connectorDisabled,\n        line: classes.connectorLine\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      spacing: 24,\n      style: {\n        marginTop: 10,\n        marginLeft: 10,\n        marginRight: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 12,\n      xl: 12,\n      xs: 12,\n      sm: 12,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      activeStep: this.state.activeStep,\n      connector: connector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, steps.map(label => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(StepLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.activeStep === steps.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"All steps completed - you're finished\"), React.createElement(Button, {\n      onClick: this.handleReset,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Reset\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.getStepContent(this.state.activeStep)), React.createElement(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.state.activeStep === 0,\n      onClick: this.handleBack,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.activeStep === steps.length - 1 ? 'Finish' : 'Next')))))))));\n  }\n\n}\n\nconst styles = theme => ({\n  root: {\n    width: '90%'\n  },\n  button: {\n    marginRight: theme.spacing.unit\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit\n  },\n  connectorActive: {\n    '& $connectorLine': {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  connectorCompleted: {\n    '& $connectorLine': {\n      borderColor: theme.palette.primary.main\n    }\n  },\n  connectorDisabled: {\n    '& $connectorLine': {\n      borderColor: theme.palette.grey[100]\n    }\n  },\n  connectorLine: {\n    transition: theme.transitions.create('border-color')\n  }\n});\n\nApp.propTypes = {\n  classes: PropTypes.object\n};\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["D:\\Work_Project\\grommet\\jib-register-2019\\src\\App.js"],"names":["React","Component","Grid","Card","CardContent","Box","Heading","Grommet","TextInput","PropTypes","withStyles","Stepper","Step","StepLabel","StepConnector","Button","Typography","getSteps","App","constructor","props","handleNext","setState","state","activeStep","handleBack","handleReset","getStepContent","bind","step","render","classes","steps","connector","active","connectorActive","completed","connectorCompleted","disabled","connectorDisabled","line","connectorLine","marginTop","marginLeft","marginRight","map","label","length","instructions","button","styles","theme","root","width","spacing","unit","marginBottom","borderColor","palette","secondary","main","primary","grey","transition","transitions","create","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Box, Heading, Grommet,TextInput } from \"grommet\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nfunction getSteps() {\n  return ['Job Description', 'Profile', 'Family', 'Contact', 'Education', 'Training', 'Career History', 'Skill'];\n}\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeStep: 0,\n    };\n    this.getStepContent = this.getStepContent.bind(this);\n  }\n  \n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return 'Select campaign settings...';\n      case 1:\n        return 'What is an ad group anyways?';\n      case 2:\n        return 'This is the bit I really care about!';\n      default:\n        return 'Unknown step';\n    }\n  }\n  handleNext = () => {\n    this.setState(state => ({\n      activeStep: state.activeStep + 1,\n    }));\n  };\n\n  handleBack = () => {\n    this.setState(state => ({\n      activeStep: state.activeStep - 1,\n    }));\n  };\n\n  handleReset = () => {\n    this.setState({\n      activeStep: 0,\n    });\n  };\n  \n  render() {\n    const { classes } = this.props;\n    const steps = getSteps();\n    const connector = (\n      <StepConnector\n        classes={{\n          active: classes.connectorActive,\n          completed: classes.connectorCompleted,\n          disabled: classes.connectorDisabled,\n          line: classes.connectorLine,\n        }}\n      />\n    );\n    return (\n      <div>\n      \n      <Grid spacing={24} style={{marginTop:10,marginLeft:10,marginRight:10}}>\n          <Grid item lg={12} xl={12} xs={12} sm={12} md={12} >\n              <Card >\n                <CardContent>\n\n                <Stepper activeStep={this.state.activeStep} connector={connector}>\n                  {steps.map(label => (\n                    <Step key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </Step>\n                  ))}\n                </Stepper>\n                <div>\n                {this.state.activeStep === steps.length ? (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n                    </Typography>\n                    <Button onClick={this.handleReset} className={classes.button}>\n                      Reset\n                    </Button>\n                  </div>\n                ) : (\n                  <div>\n                    <Typography className={classes.instructions}>{this.getStepContent(this.state.activeStep)}</Typography>\n                    <div style={{marginTop:20}}>\n\n                      <Button\n                        disabled={this.state.activeStep === 0}\n                        onClick={this.handleBack}\n                        className={classes.button}\n                      >\n                        Back\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.handleNext}\n                        className={classes.button}\n                      >\n                        {this.state.activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n        </div>\n\n                </CardContent>\n              </Card>\n          </Grid>\n      </Grid>\n\n\n      \n      \n      </div>\n    );\n  }\n}\n\n\nconst styles = theme => ({\n  root: {\n    width: '90%',\n  },\n  button: {\n    marginRight: theme.spacing.unit,\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit,\n  },\n  connectorActive: {\n    '& $connectorLine': {\n      borderColor: theme.palette.secondary.main,\n    },\n  },\n  connectorCompleted: {\n    '& $connectorLine': {\n      borderColor: theme.palette.primary.main,\n    },\n  },\n  connectorDisabled: {\n    '& $connectorLine': {\n      borderColor: theme.palette.grey[100],\n    },\n  },\n  connectorLine: {\n    transition: theme.transitions.create('border-color'),\n  },\n});\n\n\nApp.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}