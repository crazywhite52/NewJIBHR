{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work_Project\\\\grommet\\\\jib-register-2019\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Box, Heading, Grommet, TextInput } from \"grommet\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\n\nfunction getSteps() {\n  return ['Job Description', 'Profile', 'Family', 'Contact', 'Education', 'Training', 'Career History', 'Skill'];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeStep: 0\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const steps = getSteps();\n    const connector = React.createElement(StepConnector, {\n      classes: {\n        active: classes.connectorActive,\n        completed: classes.connectorCompleted,\n        disabled: classes.connectorDisabled,\n        line: classes.connectorLine\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      spacing: 24,\n      style: {\n        marginTop: 10,\n        marginLeft: 10,\n        marginRight: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 12,\n      xl: 12,\n      xs: 12,\n      sm: 12,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      activeStep: this.state.activeStep,\n      connector: connector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, steps.map(label => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(StepLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.activeStep === steps.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"All steps completed - you're finished\"), React.createElement(Button, {\n      onClick: this.handleReset,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Reset\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, getStepContent(this.state.activeStep)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.state.activeStep === 0,\n      onClick: this.handleBack,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.activeStep === steps.length - 1 ? 'Finish' : 'Next')))))))));\n  }\n\n}\n\nconst styles = theme => ({\n  root: {\n    width: '90%'\n  },\n  button: {\n    marginRight: theme.spacing.unit\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit\n  },\n  connectorActive: {\n    '& $connectorLine': {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  connectorCompleted: {\n    '& $connectorLine': {\n      borderColor: theme.palette.primary.main\n    }\n  },\n  connectorDisabled: {\n    '& $connectorLine': {\n      borderColor: theme.palette.grey[100]\n    }\n  },\n  connectorLine: {\n    transition: theme.transitions.create('border-color')\n  }\n});\n\nApp.propTypes = {\n  classes: PropTypes.object\n};\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["D:\\Work_Project\\grommet\\jib-register-2019\\src\\App.js"],"names":["React","Component","Grid","Card","CardContent","Box","Heading","Grommet","TextInput","PropTypes","withStyles","Stepper","Step","StepLabel","StepConnector","Button","getSteps","App","constructor","props","state","activeStep","render","classes","steps","connector","active","connectorActive","completed","connectorCompleted","disabled","connectorDisabled","line","connectorLine","marginTop","marginLeft","marginRight","map","label","length","instructions","handleReset","button","getStepContent","handleBack","handleNext","styles","theme","root","width","spacing","unit","marginBottom","borderColor","palette","secondary","main","primary","grey","transition","transitions","create","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Box, Heading, Grommet,TextInput } from \"grommet\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport Button from '@material-ui/core/Button';\n\n\nfunction getSteps() {\n  return ['Job Description', 'Profile', 'Family', 'Contact', 'Education', 'Training', 'Career History', 'Skill'];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeStep: 0,\n    };\n  }\n  \n\n  \n  render() {\n    const { classes } = this.props;\n    const steps = getSteps();\n    const connector = (\n      <StepConnector\n        classes={{\n          active: classes.connectorActive,\n          completed: classes.connectorCompleted,\n          disabled: classes.connectorDisabled,\n          line: classes.connectorLine,\n        }}\n      />\n    );\n    return (\n      <div>\n      \n      <Grid spacing={24} style={{marginTop:10,marginLeft:10,marginRight:10}}>\n          <Grid item lg={12} xl={12} xs={12} sm={12} md={12} >\n              <Card >\n                <CardContent>\n\n                <Stepper activeStep={this.state.activeStep} connector={connector}>\n                  {steps.map(label => (\n                    <Step key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </Step>\n                  ))}\n                </Stepper>\n                <div>\n                {this.state.activeStep === steps.length ? (\n                  <div>\n                    <Typography className={classes.instructions}>\n                      All steps completed - you&apos;re finished\n                    </Typography>\n                    <Button onClick={this.handleReset} className={classes.button}>\n                      Reset\n                    </Button>\n                  </div>\n                ) : (\n                  <div>\n                    <Typography className={classes.instructions}>{getStepContent(this.state.activeStep)}</Typography>\n                    <div>\n                      <Button\n                        disabled={this.state.activeStep === 0}\n                        onClick={this.handleBack}\n                        className={classes.button}\n                      >\n                        Back\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.handleNext}\n                        className={classes.button}\n                      >\n                        {this.state.activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n        </div>\n\n                </CardContent>\n              </Card>\n          </Grid>\n      </Grid>\n\n\n      \n      \n      </div>\n    );\n  }\n}\n\n\nconst styles = theme => ({\n  root: {\n    width: '90%',\n  },\n  button: {\n    marginRight: theme.spacing.unit,\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit,\n  },\n  connectorActive: {\n    '& $connectorLine': {\n      borderColor: theme.palette.secondary.main,\n    },\n  },\n  connectorCompleted: {\n    '& $connectorLine': {\n      borderColor: theme.palette.primary.main,\n    },\n  },\n  connectorDisabled: {\n    '& $connectorLine': {\n      borderColor: theme.palette.grey[100],\n    },\n  },\n  connectorLine: {\n    transition: theme.transitions.create('border-color'),\n  },\n});\n\n\nApp.propTypes = {\n  classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(App);"]},"metadata":{},"sourceType":"module"}