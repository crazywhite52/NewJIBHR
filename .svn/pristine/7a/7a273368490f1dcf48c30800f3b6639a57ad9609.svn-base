{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work_Project\\\\grommet\\\\jib-register-2019\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { Box, Heading, Grommet, TextInput } from \"grommet\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction getSteps() {\n  return [\"Job Description\", \"Profile\", \"Family\", \"Contact\", \"Education\", \"Training\", \"Career History\", \"Skill\"];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNext = () => {\n      this.setState(state => ({\n        activeStep: state.activeStep + 1\n      }));\n    };\n\n    this.handleBack = () => {\n      this.setState(state => ({\n        activeStep: state.activeStep - 1\n      }));\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0\n      });\n    };\n\n    this.state = {\n      activeStep: 0\n    };\n    this.getStepContent = this.getStepContent.bind(this);\n  }\n\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return \"ลักษณะงานที่ต้องการ\";\n\n      case 1:\n        return \"ข้อมูลส่วนตัว\";\n\n      case 2:\n        return \"ครอบครัว\";\n\n      case 3:\n        return \"การติดต่อ\";\n\n      case 4:\n        return \"การศึกษา\";\n\n      case 5:\n        return \"การฝึกอบรมพิเศษ\";\n\n      case 6:\n        return \"การทำงาน/ประสบการณ์\";\n\n      case 7:\n        return \"ความสามารถ\";\n\n      default:\n        return \"Unknown step\";\n    }\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const steps = getSteps();\n    const connector = React.createElement(StepConnector, {\n      classes: {\n        active: classes.connectorActive,\n        completed: classes.connectorCompleted,\n        disabled: classes.connectorDisabled,\n        line: classes.connectorLine\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      spacing: 24,\n      style: {\n        marginTop: 10,\n        marginLeft: 10,\n        marginRight: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 12,\n      xl: 12,\n      xs: 12,\n      sm: 12,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Card, {\n      color: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      activeStep: this.state.activeStep,\n      connector: connector,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, steps.map(label => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(StepLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.activeStep === steps.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"All steps completed - you're finished\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.getStepContent(this.state.activeStep)), React.createElement(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.state.activeStep === 0,\n      onClick: this.handleBack,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.activeStep === steps.length - 1 ? \"Finish\" : \"Next\")))))))));\n  }\n\n}\n\nconst styles = theme => ({\n  root: {\n    width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing.unit\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit\n  },\n  connectorActive: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  connectorCompleted: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.primary.main\n    }\n  },\n  connectorDisabled: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.grey[100]\n    }\n  },\n  connectorLine: {\n    transition: theme.transitions.create(\"border-color\")\n  }\n});\n\nApp.propTypes = {\n  classes: PropTypes.object\n};\nexport default withStyles(styles)(App);","map":{"version":3,"sources":["D:\\Work_Project\\grommet\\jib-register-2019\\src\\App.js"],"names":["React","Component","Grid","Card","CardContent","Box","Heading","Grommet","TextInput","PropTypes","withStyles","Stepper","Step","StepLabel","StepConnector","Button","Typography","getSteps","App","constructor","props","handleNext","setState","state","activeStep","handleBack","handleReset","getStepContent","bind","step","render","classes","steps","connector","active","connectorActive","completed","connectorCompleted","disabled","connectorDisabled","line","connectorLine","marginTop","marginLeft","marginRight","color","map","label","length","instructions","button","styles","theme","root","width","spacing","unit","marginBottom","borderColor","palette","secondary","main","primary","grey","transition","transitions","create","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { Box, Heading, Grommet, TextInput } from \"grommet\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepConnector from \"@material-ui/core/StepConnector\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction getSteps() {\n  return [\n    \"Job Description\",\n    \"Profile\",\n    \"Family\",\n    \"Contact\",\n    \"Education\",\n    \"Training\",\n    \"Career History\",\n    \"Skill\"\n  ];\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeStep: 0\n    };\n    this.getStepContent = this.getStepContent.bind(this);\n  }\n\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return \"ลักษณะงานที่ต้องการ\";\n      case 1:\n        return \"ข้อมูลส่วนตัว\";\n      case 2:\n        return \"ครอบครัว\";\n      case 3:\n        return \"การติดต่อ\";\n      case 4:\n        return \"การศึกษา\";\n      case 5:\n        return \"การฝึกอบรมพิเศษ\";\n      case 6:\n        return \"การทำงาน/ประสบการณ์\";\n      case 7:\n        return \"ความสามารถ\";\n      default:\n        return \"Unknown step\";\n    }\n  }\n  handleNext = () => {\n    this.setState(state => ({\n      activeStep: state.activeStep + 1\n    }));\n  };\n\n  handleBack = () => {\n    this.setState(state => ({\n      activeStep: state.activeStep - 1\n    }));\n  };\n\n  handleReset = () => {\n    this.setState({\n      activeStep: 0\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const steps = getSteps();\n    const connector = (\n      <StepConnector\n        classes={{\n          active: classes.connectorActive,\n          completed: classes.connectorCompleted,\n          disabled: classes.connectorDisabled,\n          line: classes.connectorLine\n        }}\n      />\n    );\n    return (\n      <div>\n        <Grid\n          spacing={24}\n          style={{ marginTop: 10, marginLeft: 10, marginRight: 10 }}\n        >\n          <Grid item lg={12} xl={12} xs={12} sm={12} md={12}>\n            <Card color={{color:'red'}}>\n              <CardContent>\n                <Stepper\n                  activeStep={this.state.activeStep}\n                  connector={connector}\n                >\n                  {steps.map(label => (\n                    <Step key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </Step>\n                  ))}\n                </Stepper>\n                <div>\n                  {this.state.activeStep === steps.length ? (\n                    <div>\n                      <Typography className={classes.instructions}>\n                        All steps completed - you&apos;re finished\n                      </Typography>\n                      \n                    </div>\n                  ) : (\n                    <div>\n                      <Typography className={classes.instructions}>\n                        {this.getStepContent(this.state.activeStep)}\n                      </Typography>\n                      <div style={{ marginTop: 20 }}>\n                        <Button\n                          disabled={this.state.activeStep === 0}\n                          onClick={this.handleBack}\n                          className={classes.button}\n                        >\n                          Back\n                        </Button>\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={this.handleNext}\n                          className={classes.button}\n                        >\n                          {this.state.activeStep === steps.length - 1\n                            ? \"Finish\"\n                            : \"Next\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing.unit\n  },\n  instructions: {\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit\n  },\n  connectorActive: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.secondary.main\n    }\n  },\n  connectorCompleted: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.primary.main\n    }\n  },\n  connectorDisabled: {\n    \"& $connectorLine\": {\n      borderColor: theme.palette.grey[100]\n    }\n  },\n  connectorLine: {\n    transition: theme.transitions.create(\"border-color\")\n  }\n});\n\nApp.propTypes = {\n  classes: PropTypes.object\n};\n\nexport default withStyles(styles)(App);\n"]},"metadata":{},"sourceType":"module"}